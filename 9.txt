--Why Selenium--
UI может быть единственной доступной частью приложения, которую мы можем протестировать и автоматизированной частью
UI автоматизация может быть тем этапо когда задействиется user-like interaction
UI автомитизация дает возможность кросс-браузерного тестирования 
Whi?
1.Бесплатный
2.Пионер в области open source
3.Библиотека автоматизации, потому на базе seleniuma можно разработать свой фреймвор/инструментарий
4.Selenium - это ядрои и он входит в состав фреймоворков
5.Является стандартом W3C 
--What is Selenium--
Selenium - это набор компонентов, каждый из которых вполне самодостаточный, но работает с четкой привязкой:
1.Selenium WebDriver  - библиотека программирования
2.Selenium Server(решают инфраструктуру и удаленные тест раны)
3.Selenium Grid(решают инфраструктуру и удаленные тест раны)
4.Selenium IDE(предлагает легкий варианты работы для разработки в селениум)
5.Selenium RC-Deprecated

Selenium IDE-это расширение для браузера, которой легко загрузить для сайта, позволяет записывать тесты и воспроизводить их
Записывать в режиме запоминаний действий,которые делает пользователь,
потом тесты можно сохранить в тестовй набор, в окошке ide увидеть пременные, команды и атрибуты авто-теста

Selenium RC(Remote Controll)-вначале был как попытка реализовать прослойку между яп, давая возможность пистать тесты и позволить взаимодействия с браузером.
Selenium RC выполнял 2 задачи:1. Управление браузером(проксирование запросов) ,
2.конвертация в js команд, приходящие по http протокола

Недостатки:
1. JS можно получить доступ к параметрам, даже к тем, к которым пользователь не может иметь доступа
2. Результаты авто тестов не достоверны
3. Конверсия из языка программирования в js имела свои издержки
4. Большая задержка выхода на (Новые версии селениума не успевали за появлений новых версий браузеров)
потому Selenium RC в утиль
На смену Selenium RC пришел Selenium WB

Selenium WB-появились новые узлы: Selenium Server и Browser Drivers
Selenium Sever - удобен, когда нам нужно построить унивицированную среду для запуска тестов.(RemoteWebDriver) 
Сам код разворачивается и пишется в Test Script(локально)

Selenium Grid-когда нужна сложная инфраструктура для тестов, когда должны быть множественные конфигурации и версии браузеров.
(запускается с параметром либо с hub,либо с node)

Selenium - является комплексным проектом,который представляет из себя набор компонентов, ипользуемые для ui автоматизации

--Synchronization issues--
Синхронизация-согласованность выполнение кода с событиями на вэб приложении
Факторы приводящие к провблемам:
1. Уверенность разработчиков в том что любое действие будет занимать нейкое константное время
2. Клиент-серверная спецификация
3. Разница перфомансов js
4. Сетевая инфроструктура 
5. Неверное указание критериев определения статуса страницы

--WebDriver - Synchronization solutions-- 
Инструменты WebDriver API на уровне кода:
1. Настройка общих временнных параметров.
2. Ожидания(waits), направленные на определения состояния переменных

Не стоит использовать: Thread.Sleep
Почему он не является методом решения вопроса синхронизации:
1. Используется константное время(1 ошибка)
2. Не является частью драйвера WebDriver API
3. У него есть слишком много обяртов в WebDriverWait|ExpectedConditions

Когда стоит использовать Thread.Sleep:
1. Ищем проблемы синхронизации
2. Заимплиментить какой-то тест(?)
(тепа чтобы отправлять пакеты по таймеру)
3. Когда удобно затормозить весь джава процесс/код во время отладки. 

Есть строго допустимые ситуации, когда стоит использовать Thread.Sleep и они не зависят от внешних условий(debug, demo, counters, only)

---Sync issues solutions - general timeouts(Настройка общих временнных параметров.)--
Что это за настройки(implicit waits, но лучше называть general timeouts):
1. Период загрузки страницы (pageLoadStrategy())
2. Время ограничения работы ассинхронного скрипта(executeAsyncScript())
3. Тайм-аут ожидания

--Sync issues solutions - Waits--
1. Explicit/fluent wait

2. Implicitly wail (исторически не входил в API, вернулся лишь недавно,лучше не использовать)
Используется для кратковременного решения проблемы синхронности . Применяется в крайнем случае.
Считаем точкой риска. Не стоит устанавливать таймаут не нулевым. Стоит реализовать все варианты.

--Sync issues solutions - implicitlyWait vs explicit waits--
1.implicitlyWait может замедлять весь тестовый запуск, используем когда хотим посмотреть исчезновение объекта, может ломать explicit waits.
implicitlyWait вложен в функцию findelement(). Используя implicitlyWait и explicit wait вместе implicitlyWait может никогда не сработать

--Webdriver locators and selectors--
можно выбрать элемент через:
1. id
2. name
3. class name
4. tag name
5. link text
6. partial link text
7. css selector
8. xpath

--DOM(Document Object Modul)--
обходим для описания структуры различных документов в унифицированном виде

--XPath--
--Reliable locators--
Правила:
1. Убрать большой процент обслуживания локаторов(делаем стабильные локаторы)
2. Обращаем внимание на ID
3. Находим якорь с наименьшим риском изменением, с легкоузнаваемыми атрибутами
4. Избегаем цифровых индексов(первыи/последний элемент)
5. используем статические локаторы, которые привязаны к функцилнальным локаторам
6. используем "золотое правило"-локаторы устойчивы к изменениям, но со строгими критериями
7. менее детально описываем ступеньки перехода(важна конечная точка)
8. обращаем внимание на потенциально рисковые места и отслеживаем значения атрибутов
9. Локаторы нужно составлять с учетом цели
10. Фреймы используются
11. не доверяем плагинам
Рекомендации:
1. Сохраняем холоднокровие
2. Быть рассудительным
3. Иметь здоровый скептецизм

--Intro---
WebDriver не является тестом без юнит фреймворка-набор джава методов и аннотаций для тестирования(!!)
С фреймоворком webdriver уже может протестировать

--Page Object--
1. Нужно разделять тестовые задания и тестовый контент
2. все взаимодействия со страницой должны быть в одном месте

---Ideas vs Development---
1.DSL- Domain Specific Language(именнование страниц и методов должны говорить сами за себя)
2.dry-не повторяйся
3.KISS-делая все просто
4.yagni-не нужно сходу все реализовывать
